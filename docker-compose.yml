version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: jobtracker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - APP_NAME=${APP_NAME}
      - APP_VERSION=${APP_VERSION}
      - DEBUG=${DEBUG}
      - LOG_LEVEL=${LOG_LEVEL}
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/jobtracker
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - TEMPORAL_API_KEY=${TEMPORAL_API_KEY}
      - TEMPORAL_ADDRESS=${TEMPORAL_ADDRESS}
      - TEMPORAL_NAMESPACE=${TEMPORAL_NAMESPACE}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - APP_NAME=${APP_NAME}
      - LOG_LEVEL=${LOG_LEVEL}
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/jobtracker
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - TEMPORAL_API_KEY=${TEMPORAL_API_KEY}
      - TEMPORAL_ADDRESS=${TEMPORAL_ADDRESS}
      - TEMPORAL_NAMESPACE=${TEMPORAL_NAMESPACE}
    volumes:
      - ./backend:/app
    command: python -m app.worker

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres_data: